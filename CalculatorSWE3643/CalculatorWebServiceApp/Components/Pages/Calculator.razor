@page "/"
@rendermode InteractiveServer
@using CalculatorEngine

<PageTitle>Calculator</PageTitle>

<style>
    table {
        margin-left: auto;
        margin-right: auto;
    }

    .button {
        width: 100%;
        padding: 10px 20px;
        background-color: #2792a1;
        color: #ffffff;
        font-size: 15px;
        font-weight: bold;
        border: none;
        border-radius: 5px;
    }

    .button:hover{
        background-color: #144750;
    }

    th,
    td{
        padding: 10px 15px;
        font-size: 15px;
        font-weight: bold;
        border: none;
        border-radius: 5px;
    //border: 2px solid black;
        text-align: left;
    }
    .error {
    background-color: #B70F0A;
    color:  #FFFFFF;
    text-align: center;
    }
    .defaultResult {
    background-color: #FFECD7;
    color:  #000000;
    text-align: center;
    }
</style>



<table id="calcu">
        <tr>
            <th>Calculator</th>
            <td><button @onclick ="Clear" aria-label="clear" class="button">Clear</button></td>
        </tr>
        
        <tr>
            <th colspan="2">
                @switch (_result)
                {
                    case { IsSuccess: true }:
                    {
                        <div class="defaultResult">
                            <h4>@_result.Operation</h4>
                            <p aria-label="result">@_result.Result</p>
                            @if (!_result.IsSuccess) {
                                <p>Error: @_result.Error</p>
                            }
                        </div> break;
                        }
                    case { IsSuccess: false }:
                        <div class="error">
                            <p>Invalid Input: </p>
                            <p aria-label="error">@_result.Error</p>
                        </div> break; 
                    default:
                        <div class="defaultResult">
                            <p aria-label="defaultLabel">Enter values(s) below and select an operation.</p>
                        </div> break;
                    }
                
            </th>
        </tr>
        <tr>
            <th>Input A</th>
            <th>Input B</th>
        </tr>
        
        <tr>
            <td colspan="1">
                <input aria-label="A" type="number" @bind="InputA"/>
            </td>
            <td colspan="1">
                <input aria-label="B" type="number" @bind="InputB"/>
            </td>
        </tr>
        
        <tr>
            <th>A and B</th>
            <th>A Only</th>
        </tr>
        
        <tr>
            <td><button @onclick="CalculatorAdd" aria-label="add" class="button">A + B</button></td>
            <td><button @onclick="CalculatorFactorial" aria-label="factorial" class="button">A !</button></td>
        </tr>
        <tr>
            <td><button @onclick="CalculatorSubtract" aria-label="subtract" class="button">A - B</button></td>
            <td><button @onclick="CalculatorSine" aria-label="sine" class="button">sin A</button></td>
        </tr>
        <tr>
            <td><button @onclick="CalculatorMultiplication" aria-label="multi" class="button">A * B</button></td>
            <td><button @onclick="CalculatorCosine" aria-label="cosine" class="button">cos A</button></td>
        </tr>
        <tr>
            <td><button @onclick="CalculatorDivision" aria-label="divide" class="button">A / B</button></td>
            <td><button @onclick="CalculatorTangent" aria-label="tangent" class="button">tan A</button></td>
        </tr>
        <tr>
            <td><button @onclick="CalculatorEquals" aria-label="equal" class="button">A == B</button></td>
            <td><button @onclick="CalculatorReciprocal" aria-label="reciprocal" class="button">1 / A</button></td>
        </tr>
        <tr>
            <td><button @onclick="CalculatorPower" aria-label="exponential" class="button">A ^ B</button></td>
        </tr>
        <tr>
            <td><button @onclick="CalculatorLogarithm" aria-label="log" class="button">A log B</button></td>
        </tr>
        <tr>
            <td><button @onclick="CalculatorRoot" aria-label="root" class="button">A root B</button></td>
        </tr>
    </table>

@code
{   
    private double InputA { get; set; }
    private double InputB { get; set; }
    private CalculationResult? _result;
    private readonly ICalculatorEngine _calculatorEngine = new CalculatorEngine.Calculator();

    private void CalculatorAdd()
    {
        _result = _calculatorEngine.Add(InputA, InputB);
    }

    private void CalculatorSubtract()
    {
        _result = _calculatorEngine.Subtract(InputA, InputB);
    }

    private void CalculatorMultiplication()
    {
        _result = _calculatorEngine.Multiplication(InputA, InputB);
    }

    private void CalculatorDivision()
    {
        _result = _calculatorEngine.Division(InputA, InputB);
    }

    private void CalculatorEquals()
    {
        _result = _calculatorEngine.Equals(InputA, InputB);
    }

    private void CalculatorPower()
    {
        _result = _calculatorEngine.Power(InputA, InputB);
    }

    private void CalculatorLogarithm()
    {
        _result = _calculatorEngine.Logarithm(InputA, InputB);
    }

    private void CalculatorRoot()
    {
        _result = _calculatorEngine.Root(InputA, InputB);
    }

    private void CalculatorFactorial()
    {
        _result = _calculatorEngine.Factorial(InputA);
    }

    private void CalculatorSine()
    {
        _result = _calculatorEngine.Sine(InputA);
    }

    private void CalculatorCosine()
    {
        _result = _calculatorEngine.Cosine(InputA);
    }

    private void CalculatorTangent()
    {
        _result = _calculatorEngine.Tangent(InputA);
    }

    private void CalculatorReciprocal()
    {
        _result = _calculatorEngine.Reciprocal(InputA);
    }

    private void Clear()
    {
        _result = null;
        InputA = 0;
        InputB = 0;
    }
}
